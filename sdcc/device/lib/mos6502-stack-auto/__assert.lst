                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.10 #15691 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __assert
                                      6 	
                                      7 	.optsdcc -mmos6502
                                      8 
                                      9 ;--------------------------------------------------------
                                     10 ;  Ordering of segments for the linker.
                                     11 ;--------------------------------------------------------
                                     12 	.area ZP      (PAG)
                                     13 	.area OSEG    (PAG, OVR)
                                     14 	.area _CODE
                                     15 	.area GSINIT
                                     16 	.area GSFINAL
                                     17 	.area CODE
                                     18 	.area RODATA
                                     19 	.area XINIT
                                     20 	.area _DATA
                                     21 	.area DATA
                                     22 	.area BSS
                                     23 ;--------------------------------------------------------
                                     24 ; Public variables in this module
                                     25 ;--------------------------------------------------------
                                     26 	.globl ___assert
                                     27 	.globl _printf
                                     28 ;--------------------------------------------------------
                                     29 ; ZP ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area ZP      (PAG)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in ram
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; uninitialized external ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area BSS
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area DABS    (ABS)
                                     43 ;--------------------------------------------------------
                                     44 ; initialized external ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DATA
                                     47 ;--------------------------------------------------------
                                     48 ; global & static initialisations
                                     49 ;--------------------------------------------------------
                                     50 	.area _CODE
                                     51 	.area GSINIT
                                     52 	.area GSFINAL
                                     53 	.area GSINIT
                                     54 ;--------------------------------------------------------
                                     55 ; Home
                                     56 ;--------------------------------------------------------
                                     57 	.area _CODE
                                     58 	.area _CODE
                                     59 ;--------------------------------------------------------
                                     60 ; code
                                     61 ;--------------------------------------------------------
                                     62 	.area CODE
                                     63 ;------------------------------------------------------------
                                     64 ;Allocation info for local variables in function '__assert'
                                     65 ;------------------------------------------------------------
                                     66 ;functionname  Allocated to stack - sp +5 +2 
                                     67 ;filename      Allocated to stack - sp +7 +2 
                                     68 ;linenumber    Allocated to stack - sp +9 +2 
                                     69 ;expression    Allocated to stack - sp +1 +2 
                                     70 ;------------------------------------------------------------
                                     71 ;	../__assert.c: 32: void __assert(const char *expression, const char *functionname, const char *filename, unsigned int linenumber)
                                     72 ;	genLabel
                                     73 ;	Raw cost for generated ic 0 : (0, 0.000000) count=1.000000
                                     74 ;	-----------------------------------------
                                     75 ;	 function __assert
                                     76 ;	-----------------------------------------
                                     77 ;	Register assignment is optimal.
                                     78 ;	Stack space usage: 2 bytes.
      000000                         79 ___assert:
                                     80 ;	genReceive: size=2
                                     81 ;	pushreg: ofs=1
      000000 85*00            [ 3]   82 	sta	*(REGTEMP+0)
      000002 8A               [ 2]   83 	txa
      000003 48               [ 3]   84 	pha
      000004 A5*00            [ 3]   85 	lda	*(REGTEMP+0)
                                     86 ;	pushreg: ofs=0
      000006 48               [ 3]   87 	pha
                                     88 ;	Raw cost for generated ic 1 : (7, 14.000000) count=1.000000
                                     89 ;	skipping generated iCode
                                     90 ;	Raw cost for generated ic 2 : (0, 0.000000) count=1.000000
                                     91 ;	../__assert.c: 34: printf("Assert(%s) failed in function %s at line %u in file %s.\n",
                                     92 ;	skipping iCode since result will be rematerialized
                                     93 ;	Raw cost for generated ic 3 : (0, 0.000000) count=1.000000
                                     94 ;	skipping iCode since result will be rematerialized
                                     95 ;	Raw cost for generated ic 4 : (0, 0.000000) count=1.000000
                                     96 ;	genIpush
      000007 BA               [ 2]   97 	tsx
      000008 BD 08 01         [ 5]   98 	lda	0x108,x
      00000B 48               [ 3]   99 	pha
      00000C BD 07 01         [ 5]  100 	lda	0x107,x
      00000F 48               [ 3]  101 	pha
                                    102 ;	Raw cost for generated ic 5 : (9, 16.000000) count=1.000000
                                    103 ;	genIpush
      000010 BD 0A 01         [ 5]  104 	lda	0x10a,x
      000013 48               [ 3]  105 	pha
      000014 BD 09 01         [ 5]  106 	lda	0x109,x
      000017 48               [ 3]  107 	pha
                                    108 ;	Raw cost for generated ic 6 : (8, 14.000000) count=1.000000
                                    109 ;	genIpush
      000018 BD 06 01         [ 5]  110 	lda	0x106,x
      00001B 48               [ 3]  111 	pha
      00001C BD 05 01         [ 5]  112 	lda	0x105,x
      00001F 48               [ 3]  113 	pha
                                    114 ;	Raw cost for generated ic 7 : (8, 14.000000) count=1.000000
                                    115 ;	genIpush
      000020 BD 02 01         [ 5]  116 	lda	0x102,x
      000023 48               [ 3]  117 	pha
      000024 BD 01 01         [ 5]  118 	lda	0x101,x
      000027 48               [ 3]  119 	pha
                                    120 ;	Raw cost for generated ic 8 : (8, 14.000000) count=1.000000
                                    121 ;	genIpush
      000028 A9s00            [ 2]  122 	lda	#>___str_0
      00002A 48               [ 3]  123 	pha
      00002B A9r00            [ 2]  124 	lda	#___str_0
      00002D 48               [ 3]  125 	pha
                                    126 ;	Raw cost for generated ic 9 : (6, 10.000000) count=1.000000
                                    127 ;	genCall
      00002E 20r00r00         [ 6]  128 	jsr	_printf
                                    129 ;	  adjustStack : cycles stk:40  incdec:24  adc:12
      000031 BA               [ 2]  130 	tsx
      000032 8A               [ 2]  131 	txa
      000033 18               [ 2]  132 	clc
      000034 69 0A            [ 2]  133 	adc	#0x0a
      000036 AA               [ 2]  134 	tax
      000037 9A               [ 2]  135 	txs
                                    136 ;	Raw cost for generated ic 10 : (10, 18.000000) count=1.000000
                                    137 ;	genLabel
      000038                        138 00103$:
                                    139 ;	Raw cost for generated ic 12 : (0, 0.000000) count=72.000000
                                    140 ;	genGoto
      000038 4Cr38r00         [ 3]  141 	jmp	00103$
                                    142 ;	Raw cost for generated ic 13 : (3, 3.000000) count=72.000000
                                    143 ;	genLabel
                                    144 ;	Raw cost for generated ic 15 : (0, 0.000000) count=0.000000
                                    145 ;	../__assert.c: 37: }
                                    146 ;	genEndFunction
                                    147 ;	  adjustStack : cycles stk:14  incdec:14  adc:24
      00003B 85*00            [ 3]  148 	sta	*(REGTEMP+0)
      00003D 68               [ 4]  149 	pla
      00003E 68               [ 4]  150 	pla
      00003F A5*00            [ 3]  151 	lda	*(REGTEMP+0)
      000041 60               [ 6]  152 	rts
                                    153 ;	Raw cost for generated ic 16 : (7, 20.000000) count=0.000000
                                    154 	.area CODE
                                    155 	.area RODATA
                                    156 	.area RODATA
      000000                        157 ___str_0:
      000000 41 73 73 65 72 74 28   158 	.ascii "Assert(%s) failed in function %s at line %u in file %s."
             25 73 29 20 66 61 69
             6C 65 64 20 69 6E 20
             66 75 6E 63 74 69 6F
             6E 20 25 73 20 61 74
             20 6C 69 6E 65 20 25
             75 20 69 6E 20 66 69
             6C 65 20 25 73 2E
      000037 0A                     159 	.db 0x0a
      000038 00                     160 	.db 0x00
                                    161 	.area CODE
                                    162 	.area XINIT
                                    163 	.area CABS    (ABS)
