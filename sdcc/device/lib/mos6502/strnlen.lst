                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.10 #15691 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module strnlen
                                      6 	
                                      7 	.optsdcc -mmos6502
                                      8 
                                      9 ;--------------------------------------------------------
                                     10 ;  Ordering of segments for the linker.
                                     11 ;--------------------------------------------------------
                                     12 	.area ZP      (PAG)
                                     13 	.area OSEG    (PAG, OVR)
                                     14 	.area _CODE
                                     15 	.area GSINIT
                                     16 	.area GSFINAL
                                     17 	.area CODE
                                     18 	.area RODATA
                                     19 	.area XINIT
                                     20 	.area _DATA
                                     21 	.area DATA
                                     22 	.area BSS
                                     23 ;--------------------------------------------------------
                                     24 ; Public variables in this module
                                     25 ;--------------------------------------------------------
                                     26 	.globl _strnlen_PARM_2
                                     27 	.globl _strnlen
                                     28 ;--------------------------------------------------------
                                     29 ; ZP ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area ZP      (PAG)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in ram
                                     34 ;--------------------------------------------------------
                                     35 	.area	OSEG    (PAG, OVR)
      000000                         36 _strnlen_i_10000_28:
      000000                         37 	.ds 2
      000002                         38 _strnlen_sloc0_1_0:
      000002                         39 	.ds 2
      000004                         40 _strnlen_sloc1_1_0:
      000004                         41 	.ds 2
                                     42 ;--------------------------------------------------------
                                     43 ; uninitialized external ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area BSS
      000000                         46 _strnlen_PARM_2:
      000000                         47 	.ds 2
                                     48 ;--------------------------------------------------------
                                     49 ; absolute external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DABS    (ABS)
                                     52 ;--------------------------------------------------------
                                     53 ; initialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area DATA
                                     56 ;--------------------------------------------------------
                                     57 ; global & static initialisations
                                     58 ;--------------------------------------------------------
                                     59 	.area _CODE
                                     60 	.area GSINIT
                                     61 	.area GSFINAL
                                     62 	.area GSINIT
                                     63 ;--------------------------------------------------------
                                     64 ; Home
                                     65 ;--------------------------------------------------------
                                     66 	.area _CODE
                                     67 	.area _CODE
                                     68 ;--------------------------------------------------------
                                     69 ; code
                                     70 ;--------------------------------------------------------
                                     71 	.area CODE
                                     72 ;------------------------------------------------------------
                                     73 ;Allocation info for local variables in function 'strnlen'
                                     74 ;------------------------------------------------------------
                                     75 ;n             Allocated with name '_strnlen_PARM_2'
                                     76 ;s             Allocated to registers 
                                     77 ;i             Allocated with name '_strnlen_i_10000_28'
                                     78 ;sloc0         Allocated with name '_strnlen_sloc0_1_0'
                                     79 ;sloc1         Allocated with name '_strnlen_sloc1_1_0'
                                     80 ;------------------------------------------------------------
                                     81 ;	../strnlen.c: 32: size_t strnlen (const char *s, size_t n)
                                     82 ;	genLabel
                                     83 ;	Raw cost for generated ic 0 : (0, 0.000000) count=1.000000
                                     84 ;	-----------------------------------------
                                     85 ;	 function strnlen
                                     86 ;	-----------------------------------------
                                     87 ;	Register assignment is optimal.
                                     88 ;	Stack space usage: 0 bytes.
      000000                         89 _strnlen:
                                     90 ;	Raw cost for generated ic 1 : (0, 0.000000) count=1.000000
                                     91 ;	genReceive
      000000 85*02            [ 3]   92 	sta	*_strnlen_sloc0_1_0
      000002 86*03            [ 3]   93 	stx	*(_strnlen_sloc0_1_0 + 1)
                                     94 ;	Raw cost for generated ic 2 : (4, 6.000000) count=1.000000
                                     95 ;	../strnlen.c: 36: while (n-- && *s++)
                                     96 ;	genAssign
                                     97 ;	genAssignLit
      000004 A0 00            [ 2]   98 	ldy	#0x00
      000006 84*00            [ 3]   99 	sty	*_strnlen_i_10000_28
      000008 84*01            [ 3]  100 	sty	*(_strnlen_i_10000_28 + 1)
                                    101 ;	Raw cost for generated ic 30 : (6, 8.000000) count=1.000000
                                    102 ;	genAssign
                                    103 ;	genCopy
      00000A ADr01r00         [ 4]  104 	lda	(_strnlen_PARM_2 + 1)
      00000D 85*05            [ 3]  105 	sta	*(_strnlen_sloc1_1_0 + 1)
      00000F ADr00r00         [ 4]  106 	lda	_strnlen_PARM_2
      000012 85*04            [ 3]  107 	sta	*_strnlen_sloc1_1_0
                                    108 ;	Raw cost for generated ic 32 : (10, 14.000000) count=1.000000
                                    109 ;	genLabel
      000014                        110 00102$:
                                    111 ;	Raw cost for generated ic 4 : (0, 0.000000) count=2.285713
                                    112 ;	genAssign
                                    113 ;	genCopy
      000014 A6*05            [ 3]  114 	ldx	*(_strnlen_sloc1_1_0 + 1)
      000016 A5*04            [ 3]  115 	lda	*_strnlen_sloc1_1_0
                                    116 ;	Raw cost for generated ic 5 : (4, 6.000000) count=2.285713
                                    117 ;	genMinus
                                    118 ;	  genMinusDec - size=2  icount=1
      000018 A4*04            [ 3]  119 	ldy	*_strnlen_sloc1_1_0
      00001A D0 02            [ 4]  120 	bne	00126$
      00001C C6*05            [ 5]  121 	dec	*(_strnlen_sloc1_1_0 + 1)
      00001E                        122 00126$:
      00001E C6*04            [ 5]  123 	dec	*_strnlen_sloc1_1_0
                                    124 ;	Raw cost for generated ic 6 : (8, 15.600000) count=2.285713
                                    125 ;	genIfx
      000020 C9 00            [ 2]  126 	cmp	#0x00
                                    127 ;	genIfxJump : z
      000022 D0 04            [ 4]  128 	bne	00128$
      000024 E0 00            [ 2]  129 	cpx	#0x00
      000026 F0 17            [ 4]  130 	beq	00104$
      000028                        131 00128$:
                                    132 ;	Raw cost for generated ic 8 : (11, 12.200000) count=2.285713
                                    133 ;	genPointerGet
      000028 A0 00            [ 2]  134 	ldy	#0x00
      00002A B1*02            [ 6]  135 	lda	[*_strnlen_sloc0_1_0],y
                                    136 ;	Raw cost for generated ic 14 : (4, 7.000000) count=1.714284
                                    137 ;	genPlus
                                    138 ;	  genPlusInc
      00002C E6*02            [ 5]  139 	inc	*_strnlen_sloc0_1_0
      00002E D0 02            [ 4]  140 	bne	00129$
      000030 E6*03            [ 5]  141 	inc	*(_strnlen_sloc0_1_0 + 1)
      000032                        142 00129$:
                                    143 ;	Raw cost for generated ic 12 : (6, 12.600000) count=1.714284
                                    144 ;	genIfx
      000032 C9 00            [ 2]  145 	cmp	#0x00
                                    146 ;	genIfxJump : z
      000034 F0 09            [ 4]  147 	beq	00104$
                                    148 ;	Raw cost for generated ic 15 : (7, 7.600000) count=1.714284
                                    149 ;	../strnlen.c: 37: i++ ;
                                    150 ;	genPlus
                                    151 ;	  genPlusInc
      000036 E6*00            [ 5]  152 	inc	*_strnlen_i_10000_28
      000038 D0 DA            [ 4]  153 	bne	00102$
      00003A E6*01            [ 5]  154 	inc	*(_strnlen_i_10000_28 + 1)
                                    155 ;	Raw cost for generated ic 19 : (6, 12.600000) count=1.285713
                                    156 ;	genGoto
      00003C 4Cr14r00         [ 3]  157 	jmp	00102$
                                    158 ;	Raw cost for generated ic 21 : (3, 3.000000) count=1.285713
                                    159 ;	genLabel
      00003F                        160 00104$:
                                    161 ;	Raw cost for generated ic 22 : (0, 0.000000) count=0.999999
                                    162 ;	../strnlen.c: 39: return i;
                                    163 ;	genRet
      00003F A6*01            [ 3]  164 	ldx	*(_strnlen_i_10000_28 + 1)
      000041 A5*00            [ 3]  165 	lda	*_strnlen_i_10000_28
                                    166 ;	Raw cost for generated ic 23 : (4, 6.000000) count=0.999999
                                    167 ;	genLabel
                                    168 ;	Raw cost for generated ic 24 : (0, 0.000000) count=0.999999
                                    169 ;	../strnlen.c: 40: }
                                    170 ;	genEndFunction
      000043 60               [ 6]  171 	rts
                                    172 ;	Raw cost for generated ic 25 : (1, 6.000000) count=0.999999
                                    173 	.area CODE
                                    174 	.area RODATA
                                    175 	.area XINIT
                                    176 	.area CABS    (ABS)
