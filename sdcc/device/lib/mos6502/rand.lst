                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.10 #15691 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module rand
                                      6 	
                                      7 	.optsdcc -mmos6502
                                      8 
                                      9 ;--------------------------------------------------------
                                     10 ;  Ordering of segments for the linker.
                                     11 ;--------------------------------------------------------
                                     12 	.area ZP      (PAG)
                                     13 	.area OSEG    (PAG, OVR)
                                     14 	.area _CODE
                                     15 	.area GSINIT
                                     16 	.area GSFINAL
                                     17 	.area CODE
                                     18 	.area RODATA
                                     19 	.area XINIT
                                     20 	.area _DATA
                                     21 	.area DATA
                                     22 	.area BSS
                                     23 ;--------------------------------------------------------
                                     24 ; Public variables in this module
                                     25 ;--------------------------------------------------------
                                     26 	.globl _rand
                                     27 	.globl _srand
                                     28 ;--------------------------------------------------------
                                     29 ; ZP ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area ZP      (PAG)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in ram
                                     34 ;--------------------------------------------------------
                                     35 	.area	OSEG    (PAG, OVR)
      000000                         36 _rand_t_10000_43:
      000000                         37 	.ds 4
      000004                         38 _rand_sloc0_1_0:
      000004                         39 	.ds 4
      000008                         40 _rand_sloc1_1_0:
      000008                         41 	.ds 4
                                     42 	.area	OSEG    (PAG, OVR)
      000000                         43 _srand_sloc0_1_0:
      000000                         44 	.ds 4
                                     45 ;--------------------------------------------------------
                                     46 ; uninitialized external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSS
                                     49 ;--------------------------------------------------------
                                     50 ; absolute external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area DABS    (ABS)
                                     53 ;--------------------------------------------------------
                                     54 ; initialized external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DATA
      000000                         57 _s:
      000000                         58 	.ds 4
                                     59 ;--------------------------------------------------------
                                     60 ; global & static initialisations
                                     61 ;--------------------------------------------------------
                                     62 	.area _CODE
                                     63 	.area GSINIT
                                     64 	.area GSFINAL
                                     65 	.area GSINIT
                                     66 ;--------------------------------------------------------
                                     67 ; Home
                                     68 ;--------------------------------------------------------
                                     69 	.area _CODE
                                     70 	.area _CODE
                                     71 ;--------------------------------------------------------
                                     72 ; code
                                     73 ;--------------------------------------------------------
                                     74 	.area CODE
                                     75 ;------------------------------------------------------------
                                     76 ;Allocation info for local variables in function 'rand'
                                     77 ;------------------------------------------------------------
                                     78 ;t             Allocated with name '_rand_t_10000_43'
                                     79 ;sloc0         Allocated with name '_rand_sloc0_1_0'
                                     80 ;sloc1         Allocated with name '_rand_sloc1_1_0'
                                     81 ;------------------------------------------------------------
                                     82 ;	../rand.c: 40: int rand(void)
                                     83 ;	genLabel
                                     84 ;	Raw cost for generated ic 0 : (0, 0.000000) count=1.000000
                                     85 ;	-----------------------------------------
                                     86 ;	 function rand
                                     87 ;	-----------------------------------------
                                     88 ;	Register assignment is optimal.
                                     89 ;	Stack space usage: 0 bytes.
      000000                         90 _rand:
                                     91 ;	Raw cost for generated ic 1 : (0, 0.000000) count=1.000000
                                     92 ;	../rand.c: 44: t ^= t >> 10;
                                     93 ;	genRightShift
                                     94 ;	genRightShiftLiteral
                                     95 ;	  genrsh32 - shift=10
      000000 ADr03r00         [ 4]   96 	lda	(_s + 3)
      000003 4A               [ 2]   97 	lsr	a
      000004 85*06            [ 3]   98 	sta	*(_rand_sloc0_1_0 + 2)
      000006 ADr02r00         [ 4]   99 	lda	(_s + 2)
      000009 6A               [ 2]  100 	ror	a
      00000A 85*05            [ 3]  101 	sta	*(_rand_sloc0_1_0 + 1)
      00000C ADr01r00         [ 4]  102 	lda	(_s + 1)
      00000F 6A               [ 2]  103 	ror	a
      000010 85*04            [ 3]  104 	sta	*_rand_sloc0_1_0
      000012 A5*06            [ 3]  105 	lda	*(_rand_sloc0_1_0 + 2)
      000014 4A               [ 2]  106 	lsr	a
      000015 66*05            [ 5]  107 	ror	*(_rand_sloc0_1_0 + 1)
      000017 66*04            [ 5]  108 	ror	*_rand_sloc0_1_0
      000019 85*06            [ 3]  109 	sta	*(_rand_sloc0_1_0 + 2)
      00001B A0 00            [ 2]  110 	ldy	#0x00
      00001D 84*07            [ 3]  111 	sty	*(_rand_sloc0_1_0 + 3)
                                    112 ;	Raw cost for generated ic 3 : (31, 50.000000) count=1.000000
                                    113 ;	genXor
      00001F ADr00r00         [ 4]  114 	lda	_s
      000022 45*04            [ 3]  115 	eor	*_rand_sloc0_1_0
      000024 85*04            [ 3]  116 	sta	*_rand_sloc0_1_0
      000026 ADr01r00         [ 4]  117 	lda	(_s + 1)
      000029 45*05            [ 3]  118 	eor	*(_rand_sloc0_1_0 + 1)
      00002B 85*05            [ 3]  119 	sta	*(_rand_sloc0_1_0 + 1)
      00002D ADr02r00         [ 4]  120 	lda	(_s + 2)
      000030 45*06            [ 3]  121 	eor	*(_rand_sloc0_1_0 + 2)
      000032 85*06            [ 3]  122 	sta	*(_rand_sloc0_1_0 + 2)
      000034 ADr03r00         [ 4]  123 	lda	(_s + 3)
      000037 45*07            [ 3]  124 	eor	*(_rand_sloc0_1_0 + 3)
      000039 85*07            [ 3]  125 	sta	*(_rand_sloc0_1_0 + 3)
                                    126 ;	Raw cost for generated ic 4 : (28, 40.000000) count=1.000000
                                    127 ;	../rand.c: 45: t ^= t << 9;
                                    128 ;	genLeftShift
                                    129 ;	genLeftShiftLiteral
                                    130 ;	  genlsh32 - shift=9
      00003B A5*04            [ 3]  131 	lda	*_rand_sloc0_1_0
      00003D 0A               [ 2]  132 	asl	a
      00003E 85*09            [ 3]  133 	sta	*(_rand_sloc1_1_0 + 1)
      000040 A5*05            [ 3]  134 	lda	*(_rand_sloc0_1_0 + 1)
      000042 2A               [ 2]  135 	rol	a
      000043 85*0A            [ 3]  136 	sta	*(_rand_sloc1_1_0 + 2)
      000045 A5*06            [ 3]  137 	lda	*(_rand_sloc0_1_0 + 2)
      000047 2A               [ 2]  138 	rol	a
      000048 84*08            [ 3]  139 	sty	*_rand_sloc1_1_0
      00004A 85*0B            [ 3]  140 	sta	*(_rand_sloc1_1_0 + 3)
                                    141 ;	Raw cost for generated ic 6 : (17, 27.000000) count=1.000000
                                    142 ;	genXor
      00004C A5*04            [ 3]  143 	lda	*_rand_sloc0_1_0
      00004E 45*08            [ 3]  144 	eor	*_rand_sloc1_1_0
      000050 85*08            [ 3]  145 	sta	*_rand_sloc1_1_0
      000052 A5*05            [ 3]  146 	lda	*(_rand_sloc0_1_0 + 1)
      000054 45*09            [ 3]  147 	eor	*(_rand_sloc1_1_0 + 1)
      000056 85*09            [ 3]  148 	sta	*(_rand_sloc1_1_0 + 1)
      000058 A5*06            [ 3]  149 	lda	*(_rand_sloc0_1_0 + 2)
      00005A 45*0A            [ 3]  150 	eor	*(_rand_sloc1_1_0 + 2)
      00005C 85*0A            [ 3]  151 	sta	*(_rand_sloc1_1_0 + 2)
      00005E A5*07            [ 3]  152 	lda	*(_rand_sloc0_1_0 + 3)
      000060 45*0B            [ 3]  153 	eor	*(_rand_sloc1_1_0 + 3)
      000062 85*0B            [ 3]  154 	sta	*(_rand_sloc1_1_0 + 3)
                                    155 ;	Raw cost for generated ic 7 : (24, 36.000000) count=1.000000
                                    156 ;	../rand.c: 46: t ^= t >> 25;
                                    157 ;	genRightShift
                                    158 ;	genRightShiftLiteral
                                    159 ;	  genrsh32 - shift=25
      000064 4A               [ 2]  160 	lsr	a
      000065 85*04            [ 3]  161 	sta	*_rand_sloc0_1_0
      000067 84*05            [ 3]  162 	sty	*(_rand_sloc0_1_0 + 1)
      000069 84*06            [ 3]  163 	sty	*(_rand_sloc0_1_0 + 2)
      00006B 84*07            [ 3]  164 	sty	*(_rand_sloc0_1_0 + 3)
                                    165 ;	Raw cost for generated ic 9 : (9, 14.000000) count=1.000000
                                    166 ;	genXor
      00006D A5*08            [ 3]  167 	lda	*_rand_sloc1_1_0
      00006F 45*04            [ 3]  168 	eor	*_rand_sloc0_1_0
      000071 85*08            [ 3]  169 	sta	*_rand_sloc1_1_0
      000073 A5*09            [ 3]  170 	lda	*(_rand_sloc1_1_0 + 1)
      000075 45*05            [ 3]  171 	eor	*(_rand_sloc0_1_0 + 1)
      000077 85*09            [ 3]  172 	sta	*(_rand_sloc1_1_0 + 1)
      000079 A5*0A            [ 3]  173 	lda	*(_rand_sloc1_1_0 + 2)
      00007B 45*06            [ 3]  174 	eor	*(_rand_sloc0_1_0 + 2)
      00007D 85*0A            [ 3]  175 	sta	*(_rand_sloc1_1_0 + 2)
      00007F A5*0B            [ 3]  176 	lda	*(_rand_sloc1_1_0 + 3)
      000081 45*07            [ 3]  177 	eor	*(_rand_sloc0_1_0 + 3)
      000083 85*0B            [ 3]  178 	sta	*(_rand_sloc1_1_0 + 3)
                                    179 ;	Raw cost for generated ic 10 : (24, 36.000000) count=1.000000
                                    180 ;	genAssign
                                    181 ;	genCopy
      000085 85*03            [ 3]  182 	sta	*(_rand_t_10000_43 + 3)
      000087 A5*0A            [ 3]  183 	lda	*(_rand_sloc1_1_0 + 2)
      000089 85*02            [ 3]  184 	sta	*(_rand_t_10000_43 + 2)
      00008B A5*09            [ 3]  185 	lda	*(_rand_sloc1_1_0 + 1)
      00008D 85*01            [ 3]  186 	sta	*(_rand_t_10000_43 + 1)
      00008F A5*08            [ 3]  187 	lda	*_rand_sloc1_1_0
      000091 85*00            [ 3]  188 	sta	*_rand_t_10000_43
                                    189 ;	Raw cost for generated ic 11 : (14, 21.000000) count=1.000000
                                    190 ;	../rand.c: 48: s = t;
                                    191 ;	genAssign
                                    192 ;	genCopy
      000093 A5*0B            [ 3]  193 	lda	*(_rand_sloc1_1_0 + 3)
      000095 8Dr03r00         [ 4]  194 	sta	(_s + 3)
      000098 A5*0A            [ 3]  195 	lda	*(_rand_sloc1_1_0 + 2)
      00009A 8Dr02r00         [ 4]  196 	sta	(_s + 2)
      00009D A5*09            [ 3]  197 	lda	*(_rand_sloc1_1_0 + 1)
      00009F 8Dr01r00         [ 4]  198 	sta	(_s + 1)
      0000A2 A5*08            [ 3]  199 	lda	*_rand_sloc1_1_0
      0000A4 8Dr00r00         [ 4]  200 	sta	_s
                                    201 ;	Raw cost for generated ic 12 : (20, 28.000000) count=1.000000
                                    202 ;	../rand.c: 50: return(t & RAND_MAX);
                                    203 ;	genCast
                                    204 ;	genCopy
      0000A7 A6*01            [ 3]  205 	ldx	*(_rand_t_10000_43 + 1)
      0000A9 A5*00            [ 3]  206 	lda	*_rand_t_10000_43
                                    207 ;	Raw cost for generated ic 19 : (4, 6.000000) count=1.000000
                                    208 ;	genAnd
      0000AB 85*00            [ 3]  209 	sta	*(REGTEMP+0)
      0000AD 8A               [ 2]  210 	txa
      0000AE 29 7F            [ 2]  211 	and	#0x7f
      0000B0 AA               [ 2]  212 	tax
      0000B1 A5*00            [ 3]  213 	lda	*(REGTEMP+0)
                                    214 ;	Raw cost for generated ic 14 : (8, 12.000000) count=1.000000
                                    215 ;	genRet
                                    216 ;	Raw cost for generated ic 16 : (0, 0.000000) count=1.000000
                                    217 ;	genLabel
                                    218 ;	Raw cost for generated ic 17 : (0, 0.000000) count=1.000000
                                    219 ;	../rand.c: 51: }
                                    220 ;	genEndFunction
      0000B3 60               [ 6]  221 	rts
                                    222 ;	Raw cost for generated ic 18 : (1, 6.000000) count=1.000000
                                    223 ;------------------------------------------------------------
                                    224 ;Allocation info for local variables in function 'srand'
                                    225 ;------------------------------------------------------------
                                    226 ;seed          Allocated to registers a x 
                                    227 ;sloc0         Allocated with name '_srand_sloc0_1_0'
                                    228 ;------------------------------------------------------------
                                    229 ;	../rand.c: 53: void srand(unsigned int seed)
                                    230 ;	genLabel
                                    231 ;	Raw cost for generated ic 0 : (0, 0.000000) count=1.000000
                                    232 ;	-----------------------------------------
                                    233 ;	 function srand
                                    234 ;	-----------------------------------------
                                    235 ;	Register assignment is optimal.
                                    236 ;	Stack space usage: 0 bytes.
      0000B4                        237 _srand:
                                    238 ;	Raw cost for generated ic 1 : (0, 0.000000) count=1.000000
                                    239 ;	genReceive
                                    240 ;	Raw cost for generated ic 2 : (0, 0.000000) count=1.000000
                                    241 ;	../rand.c: 55: s = seed | 0x80000000; /* s shall not become 0 */
                                    242 ;	genCast
                                    243 ;	genCopy
      0000B4 A0 00            [ 2]  244 	ldy	#0x00
      0000B6 84*03            [ 3]  245 	sty	*(_srand_sloc0_1_0 + 3)
      0000B8 84*02            [ 3]  246 	sty	*(_srand_sloc0_1_0 + 2)
      0000BA 86*01            [ 3]  247 	stx	*(_srand_sloc0_1_0 + 1)
      0000BC 85*00            [ 3]  248 	sta	*_srand_sloc0_1_0
                                    249 ;	Raw cost for generated ic 3 : (10, 14.000000) count=1.000000
                                    250 ;	genOr
      0000BE 8Dr00r00         [ 4]  251 	sta	_s
      0000C1 8A               [ 2]  252 	txa
      0000C2 8Dr01r00         [ 4]  253 	sta	(_s + 1)
      0000C5 A5*02            [ 3]  254 	lda	*(_srand_sloc0_1_0 + 2)
      0000C7 8Dr02r00         [ 4]  255 	sta	(_s + 2)
      0000CA A5*03            [ 3]  256 	lda	*(_srand_sloc0_1_0 + 3)
      0000CC 09 80            [ 2]  257 	ora	#0x80
      0000CE 8Dr03r00         [ 4]  258 	sta	(_s + 3)
                                    259 ;	Raw cost for generated ic 4 : (19, 26.000000) count=1.000000
                                    260 ;	genLabel
                                    261 ;	Raw cost for generated ic 7 : (0, 0.000000) count=1.000000
                                    262 ;	../rand.c: 56: }
                                    263 ;	genEndFunction
      0000D1 60               [ 6]  264 	rts
                                    265 ;	Raw cost for generated ic 8 : (1, 6.000000) count=1.000000
                                    266 	.area CODE
                                    267 	.area RODATA
                                    268 	.area XINIT
      000000                        269 __xinit__s:
      000000 01 00 00 80            270 	.byte #0x01, #0x00, #0x00, #0x80	; 2147483649
                                    271 	.area CABS    (ABS)
