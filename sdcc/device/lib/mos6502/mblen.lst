                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.10 #15691 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mblen
                                      6 	
                                      7 	.optsdcc -mmos6502
                                      8 
                                      9 ;--------------------------------------------------------
                                     10 ;  Ordering of segments for the linker.
                                     11 ;--------------------------------------------------------
                                     12 	.area ZP      (PAG)
                                     13 	.area OSEG    (PAG, OVR)
                                     14 	.area _CODE
                                     15 	.area GSINIT
                                     16 	.area GSFINAL
                                     17 	.area CODE
                                     18 	.area RODATA
                                     19 	.area XINIT
                                     20 	.area _DATA
                                     21 	.area DATA
                                     22 	.area BSS
                                     23 ;--------------------------------------------------------
                                     24 ; Public variables in this module
                                     25 ;--------------------------------------------------------
                                     26 	.globl _mblen_PARM_2
                                     27 	.globl _mblen
                                     28 ;--------------------------------------------------------
                                     29 ; ZP ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area ZP      (PAG)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in ram
                                     34 ;--------------------------------------------------------
                                     35 	.area	OSEG    (PAG, OVR)
      000000                         36 _mblen_sloc0_1_0:
      000000                         37 	.ds 2
      000002                         38 _mblen_sloc1_1_0:
      000002                         39 	.ds 2
                                     40 ;--------------------------------------------------------
                                     41 ; uninitialized external ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area BSS
      000000                         44 _mblen_PARM_2:
      000000                         45 	.ds 2
      000002                         46 _mblen_s_10000_42:
      000002                         47 	.ds 2
                                     48 ;--------------------------------------------------------
                                     49 ; absolute external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DABS    (ABS)
                                     52 ;--------------------------------------------------------
                                     53 ; initialized external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area DATA
                                     56 ;--------------------------------------------------------
                                     57 ; global & static initialisations
                                     58 ;--------------------------------------------------------
                                     59 	.area _CODE
                                     60 	.area GSINIT
                                     61 	.area GSFINAL
                                     62 	.area GSINIT
                                     63 ;--------------------------------------------------------
                                     64 ; Home
                                     65 ;--------------------------------------------------------
                                     66 	.area _CODE
                                     67 	.area _CODE
                                     68 ;--------------------------------------------------------
                                     69 ; code
                                     70 ;--------------------------------------------------------
                                     71 	.area CODE
                                     72 ;------------------------------------------------------------
                                     73 ;Allocation info for local variables in function 'mblen'
                                     74 ;------------------------------------------------------------
                                     75 ;n             Allocated with name '_mblen_PARM_2'
                                     76 ;s             Allocated with name '_mblen_s_10000_42'
                                     77 ;m             Allocated to registers 
                                     78 ;c             Allocated to registers a 
                                     79 ;sloc0         Allocated with name '_mblen_sloc0_1_0'
                                     80 ;sloc1         Allocated with name '_mblen_sloc1_1_0'
                                     81 ;------------------------------------------------------------
                                     82 ;	../mblen.c: 31: int mblen(const char *s, size_t n)
                                     83 ;	genLabel
                                     84 ;	Raw cost for generated ic 0 : (0, 0.000000) count=1.000000
                                     85 ;	-----------------------------------------
                                     86 ;	 function mblen
                                     87 ;	-----------------------------------------
                                     88 ;	Register assignment is optimal.
                                     89 ;	Stack space usage: 0 bytes.
      000000                         90 _mblen:
                                     91 ;	Raw cost for generated ic 1 : (0, 0.000000) count=1.000000
                                     92 ;	genReceive
      000000 8Dr02r00         [ 4]   93 	sta	_mblen_s_10000_42
      000003 8Er03r00         [ 4]   94 	stx	(_mblen_s_10000_42 + 1)
                                     95 ;	Raw cost for generated ic 2 : (6, 8.000000) count=1.000000
                                     96 ;	../mblen.c: 36: if(!s)
                                     97 ;	genIfx
      000006 8A               [ 2]   98 	txa
      000007 0Dr02r00         [ 4]   99 	ora	_mblen_s_10000_42
                                    100 ;	genIfxJump : z
      00000A D0 04            [ 4]  101 	bne	00102$
                                    102 ;	Raw cost for generated ic 4 : (9, 11.600000) count=1.000000
                                    103 ;	../mblen.c: 37: return(0);
                                    104 ;	genRet
      00000C A9 00            [ 2]  105 	lda	#0x00
      00000E AA               [ 2]  106 	tax
      00000F 60               [ 6]  107 	rts
                                    108 ;	Raw cost for generated ic 7 : (6, 7.000000) count=0.750000
                                    109 ;	genLabel
      000010                        110 00102$:
                                    111 ;	Raw cost for generated ic 8 : (0, 0.000000) count=1.000000
                                    112 ;	../mblen.c: 39: if(!n)
                                    113 ;	genIfx
      000010 ADr01r00         [ 4]  114 	lda	(_mblen_PARM_2 + 1)
      000013 0Dr00r00         [ 4]  115 	ora	_mblen_PARM_2
                                    116 ;	genIfxJump : z
      000016 D0 04            [ 4]  117 	bne	00104$
                                    118 ;	Raw cost for generated ic 9 : (11, 13.600000) count=1.000000
                                    119 ;	../mblen.c: 40: return(-1);
                                    120 ;	genRet
      000018 A9 FF            [ 2]  121 	lda	#0xff
      00001A AA               [ 2]  122 	tax
      00001B 60               [ 6]  123 	rts
                                    124 ;	Raw cost for generated ic 12 : (6, 7.000000) count=0.750000
                                    125 ;	genLabel
      00001C                        126 00104$:
                                    127 ;	Raw cost for generated ic 13 : (0, 0.000000) count=1.000000
                                    128 ;	../mblen.c: 42: c = *s;
                                    129 ;	genPointerGet
                                    130 ;	  setupDPTR - off=0 remat=(null) savea=0
      00001C AEr02r00         [ 4]  131 	ldx	_mblen_s_10000_42
      00001F 86*00            [ 3]  132 	stx	*(DPTR+0)
      000021 AEr03r00         [ 4]  133 	ldx	(_mblen_s_10000_42 + 1)
      000024 86*01            [ 3]  134 	stx	*(DPTR+1)
      000026 A0 00            [ 2]  135 	ldy	#0x00
      000028 B1*00            [ 6]  136 	lda	[DPTR],y
                                    137 ;	Raw cost for generated ic 15 : (14, 21.000000) count=1.000000
                                    138 ;	../mblen.c: 44: if(!c)
                                    139 ;	genIfx
                                    140 ;	genIfxJump : z
      00002A D0 03            [ 4]  141 	bne	00106$
                                    142 ;	Raw cost for generated ic 17 : (5, 5.600000) count=1.000000
                                    143 ;	../mblen.c: 45: return(0);
                                    144 ;	genRet
      00002C 98               [ 2]  145 	tya
      00002D AA               [ 2]  146 	tax
      00002E 60               [ 6]  147 	rts
                                    148 ;	Raw cost for generated ic 20 : (5, 7.000000) count=0.750000
                                    149 ;	genLabel
      00002F                        150 00106$:
                                    151 ;	Raw cost for generated ic 21 : (0, 0.000000) count=1.000000
                                    152 ;	../mblen.c: 47: if(c <= 0x7f)
                                    153 ;	genCmp
      00002F C9 7F            [ 2]  154 	cmp	#0x7f
      000031 F0 02            [ 4]  155 	beq	00188$
      000033 B0 05            [ 4]  156 	bcs	00126$
      000035                        157 00188$:
                                    158 ;	Raw cost for generated ic 22 : (9, 10.200000) count=1.000000
                                    159 ;	skipping generated iCode
                                    160 ;	Raw cost for generated ic 23 : (0, 0.000000) count=1.000000
                                    161 ;	../mblen.c: 48: return(1);
                                    162 ;	genRet
      000035 A9 01            [ 2]  163 	lda	#0x01
      000037 A2 00            [ 2]  164 	ldx	#0x00
      000039 60               [ 6]  165 	rts
                                    166 ;	Raw cost for generated ic 26 : (7, 7.000000) count=0.750000
                                    167 ;	../mblen.c: 50: while(c & 0x80)
                                    168 ;	genLabel
      00003A                        169 00126$:
                                    170 ;	Raw cost for generated ic 73 : (0, 0.000000) count=1.000000
                                    171 ;	genAssign
                                    172 ;	genCopy
      00003A A2 00            [ 2]  173 	ldx	#0x00
                                    174 ;	Raw cost for generated ic 75 : (2, 2.000000) count=1.000000
                                    175 ;	genLabel
      00003C                        176 00109$:
                                    177 ;	Raw cost for generated ic 28 : (0, 0.000000) count=3.999997
                                    178 ;	genAnd
      00003C C9 00            [ 2]  179 	cmp	#0x00
                                    180 ;	genIfxJump : n
      00003E 10 05            [ 4]  181 	bpl	00111$
                                    182 ;	Raw cost for generated ic 30 : (7, 7.600000) count=3.999997
                                    183 ;	skipping generated iCode
                                    184 ;	Raw cost for generated ic 31 : (0, 0.000000) count=3.999997
                                    185 ;	../mblen.c: 52: c <<= 1;
                                    186 ;	genLeftShift
                                    187 ;	genLeftShiftLiteral
                                    188 ;	  genlsh8 - shift=1
      000040 0A               [ 2]  189 	asl	a
                                    190 ;	Raw cost for generated ic 34 : (1, 2.000000) count=2.999997
                                    191 ;	../mblen.c: 53: m++;
                                    192 ;	genPlus
                                    193 ;	  genPlusInc
      000041 E8               [ 2]  194 	inx
                                    195 ;	Raw cost for generated ic 37 : (1, 2.000000) count=2.999997
                                    196 ;	genGoto
      000042 4Cr3Cr00         [ 3]  197 	jmp	00109$
                                    198 ;	Raw cost for generated ic 39 : (3, 3.000000) count=2.999997
                                    199 ;	genLabel
      000045                        200 00111$:
                                    201 ;	Raw cost for generated ic 40 : (0, 0.000000) count=0.999999
                                    202 ;	../mblen.c: 56: if(m > n)
                                    203 ;	genCast
                                    204 ;	genCopy
      000045 A0 00            [ 2]  205 	ldy	#0x00
      000047 84*01            [ 3]  206 	sty	*(_mblen_sloc0_1_0 + 1)
      000049 86*00            [ 3]  207 	stx	*_mblen_sloc0_1_0
                                    208 ;	Raw cost for generated ic 41 : (6, 8.000000) count=0.999999
                                    209 ;	genCmp
      00004B ADr00r00         [ 4]  210 	lda	_mblen_PARM_2
      00004E 38               [ 2]  211 	sec
      00004F E5*00            [ 3]  212 	sbc	*_mblen_sloc0_1_0
      000051 ADr01r00         [ 4]  213 	lda	(_mblen_PARM_2 + 1)
      000054 E5*01            [ 3]  214 	sbc	*(_mblen_sloc0_1_0 + 1)
      000056 B0 04            [ 4]  215 	bcs	00129$
                                    216 ;	Raw cost for generated ic 42 : (16, 21.600000) count=0.999999
                                    217 ;	skipping generated iCode
                                    218 ;	Raw cost for generated ic 43 : (0, 0.000000) count=0.999999
                                    219 ;	../mblen.c: 57: return(-1);
                                    220 ;	genRet
      000058 A9 FF            [ 2]  221 	lda	#0xff
      00005A AA               [ 2]  222 	tax
      00005B 60               [ 6]  223 	rts
                                    224 ;	Raw cost for generated ic 46 : (6, 7.000000) count=0.749999
                                    225 ;	../mblen.c: 60: while(--m)
                                    226 ;	genLabel
      00005C                        227 00129$:
                                    228 ;	Raw cost for generated ic 74 : (0, 0.000000) count=0.999998
                                    229 ;	genAssign
                                    230 ;	genCopy
      00005C ADr03r00         [ 4]  231 	lda	(_mblen_s_10000_42 + 1)
      00005F 85*03            [ 3]  232 	sta	*(_mblen_sloc1_1_0 + 1)
      000061 ADr02r00         [ 4]  233 	lda	_mblen_s_10000_42
      000064 85*02            [ 3]  234 	sta	*_mblen_sloc1_1_0
                                    235 ;	Raw cost for generated ic 78 : (10, 14.000000) count=0.999998
                                    236 ;	genAssign
                                    237 ;	genCopy
                                    238 ;	Raw cost for generated ic 79 : (0, 0.000000) count=0.999998
                                    239 ;	genLabel
      000066                        240 00116$:
                                    241 ;	Raw cost for generated ic 50 : (0, 0.000000) count=2.285708
                                    242 ;	genMinus
                                    243 ;	  genMinusDec - size=1  icount=1
      000066 CA               [ 2]  244 	dex
                                    245 ;	Raw cost for generated ic 51 : (1, 2.000000) count=2.285708
                                    246 ;	genIfx
                                    247 ;	genIfxJump : z
      000067 F0 14            [ 4]  248 	beq	00118$
                                    249 ;	Raw cost for generated ic 53 : (5, 5.600000) count=2.285708
                                    250 ;	../mblen.c: 61: if((*++s & 0xc0) != 0x80)
                                    251 ;	genPlus
                                    252 ;	  genPlusInc
      000069 E6*02            [ 5]  253 	inc	*_mblen_sloc1_1_0
      00006B D0 02            [ 4]  254 	bne	00194$
      00006D E6*03            [ 5]  255 	inc	*(_mblen_sloc1_1_0 + 1)
      00006F                        256 00194$:
                                    257 ;	Raw cost for generated ic 56 : (6, 12.600000) count=1.714281
                                    258 ;	genPointerGet
      00006F A0 00            [ 2]  259 	ldy	#0x00
      000071 B1*02            [ 6]  260 	lda	[*_mblen_sloc1_1_0],y
                                    261 ;	Raw cost for generated ic 59 : (4, 7.000000) count=1.714281
                                    262 ;	genCast
                                    263 ;	genCopy
                                    264 ;	Raw cost for generated ic 60 : (0, 0.000000) count=1.714281
                                    265 ;	genAnd
      000073 29 C0            [ 2]  266 	and	#0xc0
                                    267 ;	Raw cost for generated ic 61 : (2, 2.000000) count=1.714281
                                    268 ;	genCmpEQorNE
      000075 C9 80            [ 2]  269 	cmp	#0x80
      000077 F0 ED            [ 4]  270 	beq	00116$
                                    271 ;	Raw cost for generated ic 62 : (7, 7.600000) count=1.714281
                                    272 ;	skipping generated iCode
                                    273 ;	Raw cost for generated ic 63 : (0, 0.000000) count=1.714281
                                    274 ;	../mblen.c: 62: return(-1);
                                    275 ;	genRet
      000079 A9 FF            [ 2]  276 	lda	#0xff
      00007B AA               [ 2]  277 	tax
      00007C 60               [ 6]  278 	rts
                                    279 ;	Raw cost for generated ic 66 : (6, 7.000000) count=0.428570
                                    280 ;	genLabel
      00007D                        281 00118$:
                                    282 ;	Raw cost for generated ic 69 : (0, 0.000000) count=0.999996
                                    283 ;	../mblen.c: 64: return(n);
                                    284 ;	genRet
      00007D A6*01            [ 3]  285 	ldx	*(_mblen_sloc0_1_0 + 1)
      00007F A5*00            [ 3]  286 	lda	*_mblen_sloc0_1_0
                                    287 ;	Raw cost for generated ic 70 : (4, 6.000000) count=0.999996
                                    288 ;	genLabel
                                    289 ;	Raw cost for generated ic 71 : (0, 0.000000) count=0.999996
                                    290 ;	../mblen.c: 65: }
                                    291 ;	genEndFunction
      000081 60               [ 6]  292 	rts
                                    293 ;	Raw cost for generated ic 72 : (1, 6.000000) count=0.999996
                                    294 	.area CODE
                                    295 	.area RODATA
                                    296 	.area XINIT
                                    297 	.area CABS    (ABS)
