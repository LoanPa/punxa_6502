                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.10 #15691 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module asinf
                                      6 	
      000000                          7 	.r65c02
                                      8 	.optsdcc -mmos65c02
                                      9 
                                     10 ;--------------------------------------------------------
                                     11 ;  Ordering of segments for the linker.
                                     12 ;--------------------------------------------------------
                                     13 	.area ZP      (PAG)
                                     14 	.area OSEG    (PAG, OVR)
                                     15 	.area _CODE
                                     16 	.area GSINIT
                                     17 	.area GSFINAL
                                     18 	.area CODE
                                     19 	.area RODATA
                                     20 	.area XINIT
                                     21 	.area _DATA
                                     22 	.area DATA
                                     23 	.area BSS
                                     24 ;--------------------------------------------------------
                                     25 ; Public variables in this module
                                     26 ;--------------------------------------------------------
                                     27 	.globl _asincosf
                                     28 	.globl _asinf_PARM_1
                                     29 	.globl _asinf
                                     30 ;--------------------------------------------------------
                                     31 ; ZP ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area ZP      (PAG)
      000000                         34 _asinf_sloc0_1_0:
      000000                         35 	.ds 4
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in ram
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; uninitialized external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area BSS
      000000                         43 _asinf_PARM_1:
      000000                         44 	.ds 4
                                     45 ;--------------------------------------------------------
                                     46 ; absolute external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DABS    (ABS)
                                     49 ;--------------------------------------------------------
                                     50 ; initialized external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area DATA
                                     53 ;--------------------------------------------------------
                                     54 ; global & static initialisations
                                     55 ;--------------------------------------------------------
                                     56 	.area _CODE
                                     57 	.area GSINIT
                                     58 	.area GSFINAL
                                     59 	.area GSINIT
                                     60 ;--------------------------------------------------------
                                     61 ; Home
                                     62 ;--------------------------------------------------------
                                     63 	.area _CODE
                                     64 	.area _CODE
                                     65 ;--------------------------------------------------------
                                     66 ; code
                                     67 ;--------------------------------------------------------
                                     68 	.area CODE
                                     69 ;------------------------------------------------------------
                                     70 ;Allocation info for local variables in function 'asinf'
                                     71 ;------------------------------------------------------------
                                     72 ;sloc0         Allocated with name '_asinf_sloc0_1_0'
                                     73 ;x             Allocated with name '_asinf_PARM_1'
                                     74 ;------------------------------------------------------------
                                     75 ;	../asinf.c: 36: float asinf(float x) _FLOAT_FUNC_REENTRANT
                                     76 ;	genLabel
                                     77 ;	Raw cost for generated ic 0 : (0, 0.000000) count=1.000000
                                     78 ;	-----------------------------------------
                                     79 ;	 function asinf
                                     80 ;	-----------------------------------------
                                     81 ;	Register assignment is optimal.
                                     82 ;	Stack space usage: 0 bytes.
      000000                         83 _asinf:
                                     84 ;	Raw cost for generated ic 1 : (0, 0.000000) count=1.000000
                                     85 ;	../asinf.c: 38: if (x == 1.0) return  HALF_PI;
                                     86 ;	genAssign
                                     87 ;	genCopy
      000000 ADr03r00         [ 4]   88 	lda	(_asinf_PARM_1 + 3)
      000003 8Dr03r00         [ 4]   89 	sta	(___fseq_PARM_1 + 3)
      000006 ADr02r00         [ 4]   90 	lda	(_asinf_PARM_1 + 2)
      000009 8Dr02r00         [ 4]   91 	sta	(___fseq_PARM_1 + 2)
      00000C ADr01r00         [ 4]   92 	lda	(_asinf_PARM_1 + 1)
      00000F 8Dr01r00         [ 4]   93 	sta	(___fseq_PARM_1 + 1)
      000012 ADr00r00         [ 4]   94 	lda	_asinf_PARM_1
      000015 8Dr00r00         [ 4]   95 	sta	___fseq_PARM_1
                                     96 ;	Raw cost for generated ic 31 : (24, 32.000000) count=1.000000
                                     97 ;	genAssign
                                     98 ;	genAssignLit
      000018 9Cr00r00         [ 4]   99 	stz	___fseq_PARM_2
      00001B 9Cr01r00         [ 4]  100 	stz	(___fseq_PARM_2 + 1)
      00001E A2 80            [ 2]  101 	ldx	#0x80
      000020 8Er02r00         [ 4]  102 	stx	(___fseq_PARM_2 + 2)
      000023 A2 3F            [ 2]  103 	ldx	#0x3f
      000025 8Er03r00         [ 4]  104 	stx	(___fseq_PARM_2 + 3)
                                    105 ;	Raw cost for generated ic 32 : (16, 20.000000) count=1.000000
                                    106 ;	genCall
      000028 20r00r00         [ 6]  107 	jsr	___fseq
                                    108 ;	assignResultValue
                                    109 ;	Raw cost for generated ic 33 : (3, 6.000000) count=1.000000
                                    110 ;	genIfx
      00002B C9 00            [ 2]  111 	cmp	#0x00
                                    112 ;	genIfxJump : z
      00002D F0 0D            [ 4]  113 	beq	00108$
                                    114 ;	Raw cost for generated ic 3 : (7, 7.600000) count=1.000000
                                    115 ;	genRet
      00002F A9 DB            [ 2]  116 	lda	#0xdb
      000031 A2 0F            [ 2]  117 	ldx	#0x0f
      000033 A0 C9            [ 2]  118 	ldy	#0xc9
      000035 84*00            [ 3]  119 	sty	*___SDCC_m6502_ret2
      000037 A0 3F            [ 2]  120 	ldy	#0x3f
      000039 84*00            [ 3]  121 	sty	*___SDCC_m6502_ret3
      00003B 60               [ 6]  122 	rts
                                    123 ;	Raw cost for generated ic 6 : (15, 17.000000) count=0.750000
                                    124 ;	genLabel
      00003C                        125 00108$:
                                    126 ;	Raw cost for generated ic 8 : (0, 0.000000) count=1.000000
                                    127 ;	../asinf.c: 39: else if (x ==-1.0) return -HALF_PI;
                                    128 ;	genAssign
                                    129 ;	genCopy
      00003C ADr03r00         [ 4]  130 	lda	(_asinf_PARM_1 + 3)
      00003F 8Dr03r00         [ 4]  131 	sta	(___fseq_PARM_1 + 3)
      000042 ADr02r00         [ 4]  132 	lda	(_asinf_PARM_1 + 2)
      000045 8Dr02r00         [ 4]  133 	sta	(___fseq_PARM_1 + 2)
      000048 ADr01r00         [ 4]  134 	lda	(_asinf_PARM_1 + 1)
      00004B 8Dr01r00         [ 4]  135 	sta	(___fseq_PARM_1 + 1)
      00004E ADr00r00         [ 4]  136 	lda	_asinf_PARM_1
      000051 8Dr00r00         [ 4]  137 	sta	___fseq_PARM_1
                                    138 ;	Raw cost for generated ic 34 : (24, 32.000000) count=1.000000
                                    139 ;	genAssign
                                    140 ;	genAssignLit
      000054 9Cr00r00         [ 4]  141 	stz	___fseq_PARM_2
      000057 9Cr01r00         [ 4]  142 	stz	(___fseq_PARM_2 + 1)
      00005A A2 80            [ 2]  143 	ldx	#0x80
      00005C 8Er02r00         [ 4]  144 	stx	(___fseq_PARM_2 + 2)
      00005F A2 BF            [ 2]  145 	ldx	#0xbf
      000061 8Er03r00         [ 4]  146 	stx	(___fseq_PARM_2 + 3)
                                    147 ;	Raw cost for generated ic 35 : (16, 20.000000) count=1.000000
                                    148 ;	genCall
      000064 20r00r00         [ 6]  149 	jsr	___fseq
                                    150 ;	assignResultValue
                                    151 ;	Raw cost for generated ic 36 : (3, 6.000000) count=1.000000
                                    152 ;	genIfx
      000067 C9 00            [ 2]  153 	cmp	#0x00
                                    154 ;	genIfxJump : z
      000069 F0 0D            [ 4]  155 	beq	00105$
                                    156 ;	Raw cost for generated ic 10 : (7, 7.600000) count=1.000000
                                    157 ;	genRet
      00006B A9 DB            [ 2]  158 	lda	#0xdb
      00006D A2 0F            [ 2]  159 	ldx	#0x0f
      00006F A0 C9            [ 2]  160 	ldy	#0xc9
      000071 84*00            [ 3]  161 	sty	*___SDCC_m6502_ret2
      000073 A0 BF            [ 2]  162 	ldy	#0xbf
      000075 84*00            [ 3]  163 	sty	*___SDCC_m6502_ret3
      000077 60               [ 6]  164 	rts
                                    165 ;	Raw cost for generated ic 13 : (15, 17.000000) count=0.750000
                                    166 ;	genLabel
      000078                        167 00105$:
                                    168 ;	Raw cost for generated ic 15 : (0, 0.000000) count=1.000000
                                    169 ;	../asinf.c: 40: else if (x == 0.0) return 0.0;
                                    170 ;	genIfx
      000078 ADr03r00         [ 4]  171 	lda	(_asinf_PARM_1 + 3)
      00007B 29 7F            [ 2]  172 	and	#0x7F
      00007D 0Dr02r00         [ 4]  173 	ora	(_asinf_PARM_1 + 2)
      000080 0Dr01r00         [ 4]  174 	ora	(_asinf_PARM_1 + 1)
      000083 0Dr00r00         [ 4]  175 	ora	_asinf_PARM_1
                                    176 ;	genIfxJump : z
      000086 D0 08            [ 4]  177 	bne	00102$
                                    178 ;	Raw cost for generated ic 16 : (19, 23.600000) count=1.000000
                                    179 ;	genRet
      000088 A9 00            [ 2]  180 	lda	#0x00
      00008A AA               [ 2]  181 	tax
      00008B 85*00            [ 3]  182 	sta	*___SDCC_m6502_ret2
      00008D 85*00            [ 3]  183 	sta	*___SDCC_m6502_ret3
      00008F 60               [ 6]  184 	rts
                                    185 ;	Raw cost for generated ic 19 : (10, 13.000000) count=0.750000
                                    186 ;	genLabel
      000090                        187 00102$:
                                    188 ;	Raw cost for generated ic 21 : (0, 0.000000) count=1.000000
                                    189 ;	../asinf.c: 41: else               return asincosf(x, false);
                                    190 ;	genAssign
                                    191 ;	genCopy
      000090 ADr03r00         [ 4]  192 	lda	(_asinf_PARM_1 + 3)
      000093 8Dr03r00         [ 4]  193 	sta	(_asincosf_PARM_1 + 3)
      000096 ADr02r00         [ 4]  194 	lda	(_asinf_PARM_1 + 2)
      000099 8Dr02r00         [ 4]  195 	sta	(_asincosf_PARM_1 + 2)
      00009C ADr01r00         [ 4]  196 	lda	(_asinf_PARM_1 + 1)
      00009F 8Dr01r00         [ 4]  197 	sta	(_asincosf_PARM_1 + 1)
      0000A2 ADr00r00         [ 4]  198 	lda	_asinf_PARM_1
      0000A5 8Dr00r00         [ 4]  199 	sta	_asincosf_PARM_1
                                    200 ;	Raw cost for generated ic 22 : (24, 32.000000) count=1.000000
                                    201 ;	genAssign
                                    202 ;	genAssignLit
      0000A8 9Cr00r00         [ 4]  203 	stz	_asincosf_PARM_2
                                    204 ;	Raw cost for generated ic 23 : (3, 4.000000) count=1.000000
                                    205 ;	genCall
      0000AB 20r00r00         [ 6]  206 	jsr	_asincosf
                                    207 ;	assignResultValue
      0000AE 85*00            [ 3]  208 	sta	*_asinf_sloc0_1_0
      0000B0 86*01            [ 3]  209 	stx	*(_asinf_sloc0_1_0 + 1)
      0000B2 A5*00            [ 3]  210 	lda	*___SDCC_m6502_ret2
      0000B4 85*02            [ 3]  211 	sta	*(_asinf_sloc0_1_0 + 2)
      0000B6 A5*00            [ 3]  212 	lda	*___SDCC_m6502_ret3
      0000B8 85*03            [ 3]  213 	sta	*(_asinf_sloc0_1_0 + 3)
                                    214 ;	Raw cost for generated ic 24 : (15, 24.000000) count=1.000000
                                    215 ;	genRet
      0000BA 85*00            [ 3]  216 	sta	*___SDCC_m6502_ret3
      0000BC A5*02            [ 3]  217 	lda	*(_asinf_sloc0_1_0 + 2)
      0000BE 85*00            [ 3]  218 	sta	*___SDCC_m6502_ret2
      0000C0 A5*00            [ 3]  219 	lda	*_asinf_sloc0_1_0
                                    220 ;	Raw cost for generated ic 25 : (8, 12.000000) count=1.000000
                                    221 ;	genLabel
                                    222 ;	Raw cost for generated ic 29 : (0, 0.000000) count=1.000000
                                    223 ;	../asinf.c: 42: }
                                    224 ;	genEndFunction
      0000C2 60               [ 6]  225 	rts
                                    226 ;	Raw cost for generated ic 30 : (1, 6.000000) count=1.000000
                                    227 	.area CODE
                                    228 	.area RODATA
                                    229 	.area XINIT
                                    230 	.area CABS    (ABS)
