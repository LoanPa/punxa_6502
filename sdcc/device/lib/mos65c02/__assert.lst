                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.10 #15691 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module __assert
                                      6 	
      000000                          7 	.r65c02
                                      8 	.optsdcc -mmos65c02
                                      9 
                                     10 ;--------------------------------------------------------
                                     11 ;  Ordering of segments for the linker.
                                     12 ;--------------------------------------------------------
                                     13 	.area ZP      (PAG)
                                     14 	.area OSEG    (PAG, OVR)
                                     15 	.area _CODE
                                     16 	.area GSINIT
                                     17 	.area GSFINAL
                                     18 	.area CODE
                                     19 	.area RODATA
                                     20 	.area XINIT
                                     21 	.area _DATA
                                     22 	.area DATA
                                     23 	.area BSS
                                     24 ;--------------------------------------------------------
                                     25 ; Public variables in this module
                                     26 ;--------------------------------------------------------
                                     27 	.globl ___assert
                                     28 	.globl _printf
                                     29 	.globl ___assert_PARM_4
                                     30 	.globl ___assert_PARM_3
                                     31 	.globl ___assert_PARM_2
                                     32 ;--------------------------------------------------------
                                     33 ; ZP ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area ZP      (PAG)
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in ram
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; uninitialized external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area BSS
      000000                         43 ___assert_PARM_2:
      000000                         44 	.ds 2
      000002                         45 ___assert_PARM_3:
      000002                         46 	.ds 2
      000004                         47 ___assert_PARM_4:
      000004                         48 	.ds 2
      000006                         49 ___assert_expression_10000_52:
      000006                         50 	.ds 2
                                     51 ;--------------------------------------------------------
                                     52 ; absolute external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area DABS    (ABS)
                                     55 ;--------------------------------------------------------
                                     56 ; initialized external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area DATA
                                     59 ;--------------------------------------------------------
                                     60 ; global & static initialisations
                                     61 ;--------------------------------------------------------
                                     62 	.area _CODE
                                     63 	.area GSINIT
                                     64 	.area GSFINAL
                                     65 	.area GSINIT
                                     66 ;--------------------------------------------------------
                                     67 ; Home
                                     68 ;--------------------------------------------------------
                                     69 	.area _CODE
                                     70 	.area _CODE
                                     71 ;--------------------------------------------------------
                                     72 ; code
                                     73 ;--------------------------------------------------------
                                     74 	.area CODE
                                     75 ;------------------------------------------------------------
                                     76 ;Allocation info for local variables in function '__assert'
                                     77 ;------------------------------------------------------------
                                     78 ;functionname  Allocated with name '___assert_PARM_2'
                                     79 ;filename      Allocated with name '___assert_PARM_3'
                                     80 ;linenumber    Allocated with name '___assert_PARM_4'
                                     81 ;expression    Allocated with name '___assert_expression_10000_52'
                                     82 ;------------------------------------------------------------
                                     83 ;	../__assert.c: 32: void __assert(const char *expression, const char *functionname, const char *filename, unsigned int linenumber)
                                     84 ;	genLabel
                                     85 ;	Raw cost for generated ic 0 : (0, 0.000000) count=1.000000
                                     86 ;	-----------------------------------------
                                     87 ;	 function __assert
                                     88 ;	-----------------------------------------
                                     89 ;	Register assignment is optimal.
                                     90 ;	Stack space usage: 0 bytes.
      000000                         91 ___assert:
                                     92 ;	Raw cost for generated ic 1 : (0, 0.000000) count=1.000000
                                     93 ;	genReceive
      000000 8Dr06r00         [ 4]   94 	sta	___assert_expression_10000_52
      000003 8Er07r00         [ 4]   95 	stx	(___assert_expression_10000_52 + 1)
                                     96 ;	Raw cost for generated ic 2 : (6, 8.000000) count=1.000000
                                     97 ;	../__assert.c: 34: printf("Assert(%s) failed in function %s at line %u in file %s.\n",
                                     98 ;	skipping iCode since result will be rematerialized
                                     99 ;	Raw cost for generated ic 3 : (0, 0.000000) count=1.000000
                                    100 ;	skipping iCode since result will be rematerialized
                                    101 ;	Raw cost for generated ic 4 : (0, 0.000000) count=1.000000
                                    102 ;	genIpush
      000006 ADr03r00         [ 4]  103 	lda	(___assert_PARM_3 + 1)
      000009 48               [ 3]  104 	pha
      00000A ADr02r00         [ 4]  105 	lda	___assert_PARM_3
      00000D 48               [ 3]  106 	pha
                                    107 ;	Raw cost for generated ic 5 : (8, 14.000000) count=1.000000
                                    108 ;	genIpush
      00000E ADr05r00         [ 4]  109 	lda	(___assert_PARM_4 + 1)
      000011 48               [ 3]  110 	pha
      000012 ADr04r00         [ 4]  111 	lda	___assert_PARM_4
      000015 48               [ 3]  112 	pha
                                    113 ;	Raw cost for generated ic 6 : (8, 14.000000) count=1.000000
                                    114 ;	genIpush
      000016 ADr01r00         [ 4]  115 	lda	(___assert_PARM_2 + 1)
      000019 48               [ 3]  116 	pha
      00001A ADr00r00         [ 4]  117 	lda	___assert_PARM_2
      00001D 48               [ 3]  118 	pha
                                    119 ;	Raw cost for generated ic 7 : (8, 14.000000) count=1.000000
                                    120 ;	genIpush
      00001E 8A               [ 2]  121 	txa
      00001F 48               [ 3]  122 	pha
      000020 ADr06r00         [ 4]  123 	lda	___assert_expression_10000_52
      000023 48               [ 3]  124 	pha
                                    125 ;	Raw cost for generated ic 8 : (6, 12.000000) count=1.000000
                                    126 ;	genIpush
      000024 A9s00            [ 2]  127 	lda	#>___str_0
      000026 48               [ 3]  128 	pha
      000027 A9r00            [ 2]  129 	lda	#___str_0
      000029 48               [ 3]  130 	pha
                                    131 ;	Raw cost for generated ic 9 : (6, 10.000000) count=1.000000
                                    132 ;	genCall
      00002A 20r00r00         [ 6]  133 	jsr	_printf
                                    134 ;	  adjustStack : cycles stk:40  incdec:24  adc:12
      00002D BA               [ 2]  135 	tsx
      00002E 8A               [ 2]  136 	txa
      00002F 18               [ 2]  137 	clc
      000030 69 0A            [ 3]  138 	adc	#0x0a
      000032 AA               [ 2]  139 	tax
      000033 9A               [ 2]  140 	txs
                                    141 ;	Raw cost for generated ic 10 : (10, 18.000000) count=1.000000
                                    142 ;	genLabel
      000034                        143 00103$:
                                    144 ;	Raw cost for generated ic 12 : (0, 0.000000) count=72.000000
                                    145 ;	genGoto
      000034 4Cr34r00         [ 3]  146 	jmp	00103$
                                    147 ;	Raw cost for generated ic 13 : (3, 3.000000) count=72.000000
                                    148 ;	genLabel
                                    149 ;	Raw cost for generated ic 15 : (0, 0.000000) count=0.000000
                                    150 ;	../__assert.c: 37: }
                                    151 ;	genEndFunction
      000037 60               [ 6]  152 	rts
                                    153 ;	Raw cost for generated ic 16 : (1, 6.000000) count=0.000000
                                    154 	.area CODE
                                    155 	.area RODATA
                                    156 	.area RODATA
      000000                        157 ___str_0:
      000000 41 73 73 65 72 74 28   158 	.ascii "Assert(%s) failed in function %s at line %u in file %s."
             25 73 29 20 66 61 69
             6C 65 64 20 69 6E 20
             66 75 6E 63 74 69 6F
             6E 20 25 73 20 61 74
             20 6C 69 6E 65 20 25
             75 20 69 6E 20 66 69
             6C 65 20 25 73 2E
      000037 0A                     159 	.db 0x0a
      000038 00                     160 	.db 0x00
                                    161 	.area CODE
                                    162 	.area XINIT
                                    163 	.area CABS    (ABS)
