/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace restart {\n"
"	%1	%2, %3\n"
"} by {\n"
"	; peephole 0 removed dead load into %2 from %3.\n"
"} if same(%1 'ld' 'ldw'), notUsed(%2), notVolatile(%3), notUsed('nf' 'zf')\n"
"\n"
"replace restart {\n"
"	%1	%2\n"
"} by {\n"
"	; peephole 0a removed dead clear of %2.\n"
"} if same(%1 'clr' 'clrw'), notUsed(%2)\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	push	%1\n"
"} by {\n"
"	; peephole 0a' removed dead pop / push pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	popw	%1\n"
"	pushw	%1\n"
"} by {\n"
"	; peephole 0a'' removed dead popw / pushw pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	clrw	x\n"
"} by {\n"
"	clr	xl\n"
"	; peephole 0b cleared xl instead of x.\n"
"} if notUsed('xh')\n"
"\n"
"replace restart {\n"
"	ldw	x, (%1, sp)\n"
"} by {\n"
"	ld	xl, (%1, sp)\n"
"	; peephole 0c loaded xl instead of x.\n"
"} if notUsed('xh'), notUsed('nf' 'zf')\n"
"\n"
"replace restart {\n"
"	ldw	x, (y)\n"
"} by {\n"
"	ld	xl, (y)\n"
"	; peephole 0d loaded xl instead of x.\n"
"} if notUsed('xh'), notUsed('nf' 'zf')\n"
"\n"
"replace restart {\n"
"	ld	%1, (y)\n"
"	ld	xl, %1\n"
"} by {\n"
"	ld	xl, (y)\n"
"	; peephole 0e loaded xl directly instead of via %1\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ldw	%1, (y)\n"
"	ldw	y, %1\n"
"} by {\n"
"	ldw	y, (y)\n"
"	; peephole 0f loaded xl directly instead of via %1\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	%1	(%3, sp), %2\n"
"	%1	%2, (%3, sp)\n"
"} by {\n"
"	%1	(%3, sp), %2\n"
"	; peephole 1 removed redundant %1 from (%3, sp) into %2.\n"
"} if same(%1 'ld' 'ldw'), notUsed('nf' 'zf')\n"
"\n"
"replace restart {\n"
"	push	%1\n"
"	ld	(0, sp), %1\n"
"} by {\n"
"	push	%1\n"
"	; peephole 1b removed redundant ld.\n"
"}\n"
"\n"
"replace restart {\n"
"	pushw	%1\n"
"	ldw	(0, sp), %1\n"
"} by {\n"
"	pushw	%1\n"
"	; peephole 1c removed redundant ldw.\n"
"}\n"
"\n"
"replace restart {\n"
"	%1	%2\n"
"} by {\n"
"	; peephole 1d removed dead %1 %2.\n"
"} if same(%1 'tst' 'tstw'), notVolatile(%2), notUsed('cf' 'zf' 'nf' 'of')\n"
"\n"
"replace restart {\n"
"	ldw	%1, y\n"
"	ldw	y, %1\n"
"} by {\n"
"	ldw	%1, y\n"
"	; peephole 1e removed redundant ldw.\n"
"} if same(%1 'x' 'z' 'sp')\n"
"\n"
"replace restart {\n"
"	ldw	%1, y\n"
"	ldw	(%2, sp), %1\n"
"} by {\n"
"	ldw	%1, y\n"
"	ldw	(%2, sp), y\n"
"	; peephole 1f loaded (%2, sp) from y instead of %1.\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	(%2, sp), y\n"
"	ldw	%1, (%2, sp)\n"
"} by {\n"
"	ldw	(%2, sp), y\n"
"	ldw	%1, y\n"
"	; peephole 1g loaded %1 from y instead of (%2, sp).\n"
"} if same(%1 'x' 'z')\n"
"\n"
"replace restart {\n"
"	%1	%2, %3\n"
"	tst	%2\n"
"} by {\n"
"	%1	%2, %3\n"
"	; peephole 2 removed redundant tst after %1\n"
"} if same(%1 'and' 'or' 'xor'), notVolatile(%2)\n"
"\n"
"replace restart {\n"
"	ld	%1, xl\n"
"	tst	%1\n"
"} by {\n"
"	ld	%1, xl\n"
"	tst	xl\n"
"	; peephole 3 tested xl instead of %1\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	xl, %1\n"
"	tst	%1\n"
"} by {\n"
"	ld	xl, %1\n"
"	tst	xl\n"
"	; peephole 4 tested xl instead of %1\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	(%1, sp), xl\n"
"	tst	(%1, sp)\n"
"} by {\n"
"	ld	(%1, sp), xl\n"
"	tst	xl\n"
"	; peephole 5 tested xl instead of (%1, sp)\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	%1, y\n"
"	tstw	%1\n"
"} by {\n"
"	ldw	%1, y\n"
"	tstw	y\n"
"	; peephole 6 tested y instead of %1\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ldw	y, %1\n"
"	tstw	%1\n"
"} by {\n"
"	ldw	y, %1\n"
"	tstw	y\n"
"	; peephole 7 tested y instead of %1\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ldw	(%1, sp), y\n"
"	tstw	(%1, sp)\n"
"} by {\n"
"	ldw	(%1, sp), y\n"
"	tstw	y\n"
"	; peephole 7 tested y instead of (%1, sp)\n"
"}\n"
"\n"
"replace restart {\n"
"	%1	%2, %3\n"
"	tstw	%2\n"
"} by {\n"
"	%1	%2, %3\n"
"	; peephole 8 removed redundant tstw after %1.\n"
"} if same(%1 'orw' 'xorw'), notVolatile(%2), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	%1	%3, (%4, sp)\n"
"	%2	%3\n"
"} by {\n"
"	%1	%3, (%4, sp)\n"
"	; peephole 8a removed redundant %2 %3 after %1.\n"
"} if same(%1 'ld' 'ldw'), same(%2 'tst' 'tstw'), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	%1	%3, (y)\n"
"	%2	%3\n"
"} by {\n"
"	%1	%3, (y)\n"
"	; peephole 8b removed redundant %2 %3 after %1.\n"
"} if same(%1 'ld' 'ldw'), same(%2 'tst' 'tstw'), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	dec	%2\n"
"	tst	%1\n"
"	jrnz	#%5\n"
"} by {\n"
"	ld	%1, %2\n"
"	dec	%2\n"
"	jrc	#%5\n"
"	; peephole 9a removed tst by adjusting jump condition\n"
"} if notVolatile(%1), notVolatile(%2), notUsed('cf' 'nf' 'zf' 'of'), notUsedFrom(%5 'cf' 'nf' 'zf' 'of')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	dec	%2\n"
"	tst	%1\n"
"	jrz	#%5\n"
"} by {\n"
"	ld	%1, %2\n"
"	dec	%2\n"
"	jrnc	#%5\n"
"	; peephole 9b removed tst by adjusting jump condition\n"
"} if notVolatile(%1), notVolatile(%2), notUsed('cf' 'nf' 'zf' 'of'), notUsedFrom(%5 'cf' 'nf' 'zf' 'of')\n"
"\n"
"replace restart {\n"
"	ld	%1, xl\n"
"	dec	xl\n"
"	tst	zh\n"
"	jrz	#%2\n"
"} by {\n"
"	ld	%1, xl\n"
"	dec	xl\n"
"	jrnc	#%2\n"
"	; peephole 10 removed tst by adjusting jump condition\n"
"} if notVolatile(%1), notUsed('cf' 'nf' 'zf' 'of'), notUsedFrom(%2 'cf' 'nf' 'zf' 'of')\n"
"\n"
"replace restart {\n"
"	clr	%1\n"
"	srl	%1\n"
"} by {\n"
"	tst	%1\n"
"	; peephole 11 replaced clr-srl by tst.\n"
"} if notVolatile(%1), notUsed(%1), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	%2	%1\n"
"	tst	%1\n"
"} by {\n"
"	%2	%1\n"
"	; peephole 12 removed redundant tst.\n"
"} if same(%2 'da' 'dec' 'inc' 'sll' 'sra' 'srl' 'tst' 'rlc' 'rrc'), notVolatile(%1), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	%2	%1\n"
"	tstw	%1\n"
"} by {\n"
"	%2	%1\n"
"	; peephole 13 removed redundant tstw.\n"
"} if same(%2 'adcw' 'decw' 'incw' 'mul' 'negw' 'rlcw' 'sbcw' 'sllw' 'sraw' 'srlw' 'rrcw' 'sbcw' 'tstw'), notVolatile(%1), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	%2	%1, %3\n"
"	tst	%1\n"
"} by {\n"
"	%2	%1, %3\n"
"	; peephole 14 removed redundant tst.\n"
"} if same(%2 'adc' 'add' 'and' 'cp' 'or' 'rot' 'sbc' 'sub' 'xor'), notVolatile(%1), notUsed('cf' 'of')\n"
"\n"
"; addw sp, #d does not set flags, but there is no tstw sp, either.\n"
"replace restart {\n"
"	%2	%1, %3\n"
"	tstw	%1\n"
"} by {\n"
"	%2	%1, %3\n"
"	; peephole 15 removed redundant tstw.\n"
"} if same(%2 'adcw' 'addw' 'cpw' 'orw' 'sbcw' 'sllw' 'subw' 'xorw'), notVolatile(%1), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	tstw	(%1, sp)\n"
"	%2	#%3\n"
"	ldw	y, (%1, sp)\n"
"} by {\n"
"	ldw	y, (%1, sp)\n"
"	; peephole 16 moved ldw to replace tstw.\n"
"	%2	#%3\n"
"	\n"
"} if same(%2 'jr' 'jrc' 'jrgt' 'jrle' 'jrn' 'jrnc' 'jrnn' 'jrno' 'jrnz' 'jro' 'jrsge' 'jrsgt' 'jrsle' 'jrslt' 'jrz'), notUsedFrom(%3 'y' 'cf' 'of'), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	clr	xh\n"
"	clr	xl\n"
"} by {\n"
"	clrw	x\n"
"	; peephole 17a merged clr into clrw\n"
"}\n"
"\n"
"replace restart {\n"
"	clr	xl\n"
"	clr	xh\n"
"} by {\n"
"	clrw	x\n"
"	; peephole 17b merged clr into clrw\n"
"}\n"
"\n"
"replace restart {\n"
"	clr	(%1, sp)\n"
"	clr	(%2, sp)\n"
"} by {\n"
"	clrw	(%1, sp)\n"
"	; peephole 17c merged clr to clrw\n"
"} if immdInRange(1 1 '-' %2 %1 %3)\n"
"\n"
"replace restart {\n"
"	ld	%1, (%2)\n"
"	incw	%2\n"
"	tst	%1\n"
"} by {\n"
"	ld	%1, (%2)\n"
"	incnw	%2\n"
"	; peephole 18a removed tst by using incnw.\n"
"} if isPort('f8'), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	ldw	%1, (%2)\n"
"	incw	%2\n"
"	tstw	%1\n"
"} by {\n"
"	ldw	%1, (%2)\n"
"	incnw	%2\n"
"	; peephole 18b removed tstw by using incnw.\n"
"} if isPort('f8'), notUsed('cf' 'of')\n"
"\n"
"replace restart {\n"
"	ldw	%1, #%2\n"
"	ld	%3, %2\n"
"} by {\n"
"	ldw	%1, #%2\n"
"	; peephole 19 reused adddress in %1.\n"
"	ld	%3, (%1)\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	%1, sp\n"
"	ldw	y, sp\n"
"} by {\n"
"	ldw	y, sp\n"
"	; peephole 20 used sp from y.\n"
"	ldw	%1, y\n"
"}\n"
"      \n"
"replace restart {\n"
"	jp	#%5\n"
"} by {\n"
"	jp	#%6\n"
"	; peephole j0 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	#%1\n"
"%1:\n"
"} by {\n"
"%1:\n"
"	; peephole j1 removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	#%1\n"
"%2:\n"
"%1:\n"
"} by {\n"
"%2:\n"
"%1:\n"
"	; peephole j2 removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	#%1\n"
"	jp	#%2\n"
"} by {\n"
"	jp	#%1\n"
"	; peephole j3a removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jr	#%1\n"
"	jp	#%2\n"
"} by {\n"
"	jr	#%1\n"
"	; peephole j3b removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	#%1\n"
"	jr	#%2\n"
"} by {\n"
"	jp	#%1\n"
"	; peephole j3c removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jr	#%1\n"
"	jr	#%2\n"
"} by {\n"
"	jr	#%1\n"
"	; peephole j3d removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	jp	#%5\n"
"	ret\n"
"} by {\n"
"	jp	#%5\n"
"	; peephole j4 removed unreachable ret.\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	#%5\n"
"	addw	sp, %1\n"
"} by {\n"
"	jp	#%5\n"
"	; peephole j5 removed unreachable addw.\n"
"}\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	jp	#%5\n"
"} by {\n"
"	jr	#%5\n"
"	; peephole j6 changed absolute to relative unconditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace restart {\n"
"	jrz	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrnz	#%5\n"
"	; peephole j7a removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrnz	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrz	#%5\n"
"	; peephole j7b removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrc	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrnc	#%5\n"
"	; peephole j7c removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrnc	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrc	#%5\n"
"	; peephole j7d removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrn	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrnn	#%5\n"
"	; peephole j7e removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrnn	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrn	#%5\n"
"	; peephole j7f removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jro	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrno	#%5\n"
"	; peephole j7g removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrno	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jro	#%5\n"
"	; peephole j7h removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsge	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrslt	#%5\n"
"	; peephole j7i removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrslt	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrsge	#%5\n"
"	; peephole j7j removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsgt	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrsle	#%5\n"
"	; peephole j7k removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsle	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrsgt	#%5\n"
"	; peephole j7l removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrgt	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrle	#%5\n"
"	; peephole j7m removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrle	#%1\n"
"	jr	#%5\n"
"%1:\n"
"} by {\n"
"	jrgt	#%5\n"
"	; peephole j7n removed jr by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	%1	#%5\n"
"} by {\n"
"	%1	#%6\n"
"	; peephole j8 jumped to %6 directly instead of via %5.\n"
"} if same(%1 'jr' 'jrc' 'jrgt' 'jrle' 'jrn' 'jrnc' 'jrnn' 'jrno' 'jrnz' 'jro' 'jrsge' 'jrsgt' 'jrsle' 'jrslt' 'jrz'), labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	jp	#%5\n"
"} by {\n"
"	ret\n"
"	; peephole j9 replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"	jr	#%5\n"
"} by {\n"
"	ret\n"
"	; peephole j10 replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"%1:\n"
"} by {\n"
"	; peephole j21 removed unused label %1.\n"
"} if labelRefCount(%1 0)\n"
"\n"
